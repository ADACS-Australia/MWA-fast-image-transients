#! /bin/bash -l
#SBATCH --export=NONE
#SBATCH --time=12:00:00
#SBATCH --nodes=1
#SBATCH --cpus-per-task=28

#ensure data is owned by mwasci
newgrp mwasci

base=BASEDIR
datadir="${base}/processing"
obsnum=OBSNUM
imsize=IMSIZE
pixscale=SCALE
mgain=MGAIN
beamsize=BEAM
clean=CLEAN

# import the tag and test_fail functions
. ${base}/bin/functions.sh
# setup the container mappings
. ${base}/bin/containers.sh

# setup a clean environment
source /group/mwa/software/module-reset.sh
module use /group/mwa/software/modulefiles
module load MWA_Tools
module list

set -x

# turn on timestamps
{

#memory in GB
mem=$(get_mem)

# set the image size
if [[ ! -z ${imsize} ]]
then 
    imsize="-size ${imsize} ${imsize}"
else
    imsize="-size 4096 4096"
fi

# set the image scale
if [[ ! -z ${pixscale} ]]
then
    pixscale="-scale ${pixscale}"
else
    pixscale="-scale 32asec"
fi

# set the mgain value
if [[ ! -z ${mgain} ]]
then
    mgain="-mgain ${mgain}"
else
    mgain="-mgain 1"
fi


# set a user input circular beam
if [[ ! -z ${beamsize} ]]
then
    beamsize="-beam-size ${beamsize}"
else
    beamsize="-elliptical-beam"
fi

#if clean is set then change it to the default clean options.
if [[ ! -z ${clean} ]]
then 
    #clean="-stopnegative -joinpolarizations -niter 20000 -threshold 0.2"
    #clean="-joinpolarizations -niter 20000 -threshold 0.2"
    clean="-join-polarizations -niter 10000000 -auto-mask 3 -auto-threshold 1"
else 
    clean="niter 0"
fi


cd ${base}
python bin/track_task.py start --jobid=${SLURM_JOBID} --start_time=`date +%s`

cd ${datadir}/${obsnum}

# detect number of intervals
dataintervals=$( taql "NELEMENTS([select distinct TIME from ${obsnum}.ms])" )

# either 224 or 240 intervals
if [[ ${dataintervals} -eq 240 ]]
then
    # 240 -> the first 4s and last 5.5s have been flagged by aoflagger
    intervals='-interval 8 229'
    #start=8
    #end=218 #(note that interval 218 to 228 will be imaged. Only 0.5s interval 229 is not imaged)
else
    # 224 -> process as below
    #intervals=''
    start=0
    end=224
fi


echo "##WSCLEAN"
for i in `seq 0 3`;
do
   j=$((8+56*i))
   k=$((j+56))
   wsclean -name ${obsnum}-28s-t000${i} ${imsize} \
   -abs-mem ${mem} \
   -weight briggs -1 -mf-weighting ${pixscale} \
   -pol xx,yy -minuv-l 30 \
   -interval ${j} ${k} \
   ${beamsize} -make-psf \
   ${clean} ${mgain} ${obsnum}.ms
   test_fail $?
done

# delete the dirty images as they are the same as the regular image
rm ${obsnum}-28s-*-dirty.fits

# make primary beam models
beams=$( ls beam-MFS-*.fits | wc -l )
if [[ ${beams} -ne 8 ]]
then
    echo "## Making primary beam"
    beam -2016 -proto ${obsnum}-28s-t0000-XX-image.fits -ms ${obsnum}.ms -name beam-MFS
    test_fail $?
else
    echo "## primary beam exists"
fi

# create stokes iquv images
echo "## making beam corrected images"
files=`ls ${obsnum}-28s-t0???-XX-image.fits`
for f in ${files}
do
  prefix=${f%%-XX-image.fits}
  pbcorrect ${prefix} image.fits beam-MFS ${prefix}-pbcorr
  test_fail $?
done

# delete the QUV images as they don't mean anything (since we only used xx/yy as input)
rm ${obsnum}-28s-*-pbcorr-[QUV].fits

cd ${base}
python bin/track_task.py finish --jobid=${SLURM_JOBID} --finish_time=`date +%s`

} 2> >(awk '{print strftime("%F %T")";",$0; fflush()}' >&2) \
  1> >(awk '{print strftime("%F %T")";",$0; fflush()}')

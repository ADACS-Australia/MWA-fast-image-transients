#! /bin/bash -l
#SBATCH --export=NONE
#SBATCH -M galaxy
#SBATCH -p gpuq
#SBATCH --account=mwasci
#SBATCH --time=12:00:00
#SBATCH --nodes=1

base=BASEDIR
datadir="${base}/processing"
obsnum=OBSNUM
catfile=CATFILE

# import the tag and test_fail functions
. ${base}/bin/functions.sh

# setup a clean environment
source /group/mwa/software/module-reset.sh
module use /group/mwa/software/modulefiles
module load MWA_Tools/mwa-sci
module list

set -x

# turn on timestamps
{
#memory in GB
mem=$( echo "$SLURM_MEM_PER_NODE / 1000" | bc )

# start
cd ${base}
python bin/track_task.py start --jobid=${SLURM_JOBID} --start_time=`date +%s`


cd ${datadir}/${obsnum}
# make sure that the metafits file exists
metafits="${obsnum}.metafits"
if [[ ! -e ${metafits} ]]
then
    wget "http://mwa-metadata01.pawsey.org.au/metadata/fits?obs_id=${obsnum}" -O ${metafits}
    test_fail $?
fi

RA=$( pyhead.py -p RA $metafits | awk '{print $3}' )
Dec=$( pyhead.py -p DEC $metafits | awk '{print $3}' )

solutions=${obsnum}_infield_solutions_initial.bin

if [[ ! -e "local_gleam_model.txt" ]]
then
    crop_catalogue.py --ra=$RA --dec=$Dec --radius=20 --minflux=1.0 --attenuate --metafits=${metafits} --catalogue=${catfile}
    vo2model.py --catalogue=cropped_catalogue.fits --point --output=local_gleam_model.txt
fi


# calibrate
calibrate -absmem ${mem} -m local_gleam_model.txt -minuv 20 -maxuv 2700 ${obsnum}.ms ${solutions}
test_fail $?

# plot calibration solutions
aocal_plot.py --refant=127 --amp_max=2 ${solutions}
test_fail $?

# apply calibration
applysolutions ${obsnum}.ms ${solutions}
test_fail $?

# run aoflagger
# default is to work on the corrected data column
aoflagger ${obsnum}.ms 
test_fail $?

solutions=${obsnum}_infield_solutions.bin
# calibrate again!
calibrate -absmem ${mem} -m local_gleam_model.txt -minuv 20 -maxuv 2700 ${obsnum}.ms ${solutions}
test_fail $?

#plot again
aocal_plot.py --refant=127 --amp_max=2 ${solutions}
test_fail $?

# apply calibration again
applysolutions ${obsnum}.ms ${solutions}
test_fail $?

cd ${base}
python bin/track_task.py finish --jobid=${SLURM_JOBID} --finish_time=`date +%s`

} 2> >(awk '{print strftime("%F %T")";",$0; fflush()}' >&2) \
  1> >(awk '{print strftime("%F %T")";",$0; fflush()}')

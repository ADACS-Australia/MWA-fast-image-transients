#! /bin/bash -l
#SBATCH --export=NONE
#SBATCH --time=12:00:00
#SBATCH --nodes=1

#ensure data is owned by mwasci
newgrp mwasci

base=BASEDIR
datadir="${base}/processing"
obsnum=OBSNUM
catfile=CATFILE
radius=RADIUS
doaoflagger=AOFLAGGER

# import the tag and test_fail functions
. ${base}/bin/functions.sh
# setup the container mappings
. ${base}/bin/containers.sh

# setup a clean environment
module load singularity
#source /group/mwa/software/module-reset.sh
#module use /group/mwa/software/modulefiles
# use MWA_Tools/mwa-sci_test to work around some h5py and crop_catalogue.py issues
#module load MWA_Tools/mwa-sci_test
# use /master_2 to make crop_catalogue.py available
#module load mwapy/master_2
#module load scipy
#module load numpy
module list

set -x

# turn on timestamps
{
#memory in GB
mem=$(get_mem)

# start
cd ${base}
python bin/track_task.py start --jobid=${SLURM_JOBID} --start_time=`date +%s`


cd ${datadir}/${obsnum}
# make sure that the metafits file exists
metafits="${obsnum}.metafits"
if [[ ! -e ${metafits} ]]
then
    wget "http://mwa-metadata01.pawsey.org.au/metadata/fits?obs_id=${obsnum}" -O ${metafits}
    test_fail $?
fi

RA=$( pyhead.py -p RA $metafits | awk '{print $3}' )
Dec=$( pyhead.py -p DEC $metafits | awk '{print $3}' )
chan=$( pyhead.py -p CENTCHAN $metafits | awk '{print $3}' )

solutions=${obsnum}_infield_solutions_initial.bin

# set a user input radius for cropping the sky model
if [[ ! -z ${radius} ]]
then
    radius="--radius=${radius}"
else
    radius="--radius=30"
fi


if [[ ! -e "local_gleam_model.txt" ]]
then
    ${base}/external/GLEAM-X-pipeline/bin/crop_catalogue.py --ra=$RA --dec=$Dec ${radius} --minflux=1.0 --attenuate --metafits=${metafits} --catalogue=${catfile} --fluxcol=S_200
    ${base}/external/GLEAM-X-pipeline/bin/vo2model.py --catalogue=cropped_catalogue.fits --point --output=local_gleam_model.txt --racol=RAJ2000 --decol=DEJ2000 --acol=a --bcol=b --pacol=pa --fluxcol=S_200 --alphacol=alpha
fi

# Maximum uv range for calibration based on GLEAM-based sky model
# In wavelengths, maximum 128T baseline at 200MHz was 1667 lambda long
# calibrate takes a maximum uv range in metres, i.e. multiply 1667 by the wavelength of the highest frequency
# lambda = c/nu = 300/1.28*(chan+11)
# Calculate min uvw in metres
maxuvm=`echo "234 / ($chan + 11) * 1667" | bc -l`


# calibrate
calibrate -absmem ${mem} -m local_gleam_model.txt -minuv 200 -maxuv ${maxuvm} ${obsnum}.ms ${solutions}
test_fail $?

# plot calibration solutions
aocal_plot.py --refant=127 --amp_max=2 ${solutions}
test_fail $?

# apply calibration
applysolutions ${obsnum}.ms ${solutions}
test_fail $?

if [[ ! -z ${doaoflagger} ]]
then
  # run aoflagger
  # default is to work on the corrected data column
  aoflagger ${obsnum}.ms 
  test_fail $?
  
  solutions=${obsnum}_infield_solutions.bin
  # calibrate again!
  calibrate -absmem ${mem} -m local_gleam_model.txt -minuv 200 -maxuv ${maxuvm} ${obsnum}.ms ${solutions}
  test_fail $?
  
  #plot again
  aocal_plot.py --refant=127 --amp_max=2 ${solutions}
  test_fail $?
  
  # apply calibration again
  applysolutions ${obsnum}.ms ${solutions}
  test_fail $?
else
  ## rename the calibration file to be the same "final" filename
  mv ${solutions} ${obsnum}_infield_solutions.bin
fi

cd ${base}
python bin/track_task.py finish --jobid=${SLURM_JOBID} --finish_time=`date +%s`

} 2> >(awk '{print strftime("%F %T")";",$0; fflush()}' >&2) \
  1> >(awk '{print strftime("%F %T")";",$0; fflush()}')

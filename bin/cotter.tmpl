#! /bin/bash -l
#SBATCH --export=NONE
#SBATCH -M galaxy
#SBATCH -p workq
#SBATCH --account=mwasci
#SBATCH --time=04:00:00
#SBATCH --nodes=1


function test_fail {
if [[ $1 != 0 ]]
then
    cd ${base}
    python bin/track_task.py fail --jobid=${SLURM_JOBID} --finish_time=`date +%s`
    exit $1
fi
}

set -x

#memory in GB
mem=$( echo "$SLURM_MEM_PER_NODE / 1000" | bc )
# number of cores (accounting for hyper-threading)
cores=$( echo "$SLURM_TASKS_PER_NODE / 2" | bc )

base=BASEDIR
datadir=${base}/processing

obsnum=OBSNUM
tres=TRES
fres=FRES


# start task
cd ${base}
python bin/track_task.py start --jobid=${SLURM_JOBID} --start_time=`date +%s`

cd ${datadir}/${obsnum}


# check how many files we expect to see
nexpected=`sqlite3 ${base}/db/MWA-GRB.sqlite "SELECT nfiles FROM observation WHERE obs_id=${obsnum};"`
# obsid's that aren't in the database will return an empty number of expected files
# if we expect more than zero files make sure we have the right number
if [[ ${nexpected} -gt 0 ]]
then
    # see how many files there are
    nfiles=`ls ${obsnum}*.{fits,mwaf} | wc -l`
    # if we don't have this many files then we have a bad result.
    if [[ ${nfiles} -eq ${nexpected} ]]
    then
	echo "Expected ${nexpected} files but found ${nfiles}, assuming something bad happened."
	test_fail 1
    fi
else
    echo "Don't know how many files to expect, so assuming everything is ok."
fi


zipflag="${obsnum}_flags.zip"
if [[ -e ${zipflag} ]]
then
    unzip -o ${zipflag}
    flagfiles="-flagfiles ${obsnum}_%%.mwaf"
else
    flagfiles=""
fi

# allow missing files since we already checked this above.
cotter -absmem ${mem} ${flagfiles} -timeres ${tres} -freqres ${fres} -allowmissing \
       -edgewidth 80 -m ${obsnum}_metafits.fits -o ${obsnum}.ms *gpubox*.fits 

test_fail $?

if [[ -d OBSNUM.ms ]]
then 
     rm *gpubox*fits *.zip *.mwaf
fi

cd ${base}
python bin/track_task.py finish --jobid=${SLURM_JOBID} --finish_time=`date +%s`


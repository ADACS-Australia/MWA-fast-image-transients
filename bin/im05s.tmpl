#! /bin/bash -l
#SBATCH --export=NONE
#SBATCH -M galaxy
#SBATCH -p gpuq
#SBATCH --account=mwasci
#SBATCH --time=10:00:00
#SBATCH --nodes=1

# define the test_fail function
./functions.sh

set -x

# turn on timestamps
{
#memory in GB
mem=$( echo "$SLURM_MEM_PER_NODE / 1000" | bc )

obsnum=OBSNUM
base=BASEDIR
imsize=IMSIZE
pixscale=SCALE

datadir=${base}/processing

# set the image size
if [[ ! -z ${imsize} ]]
then 
    imsize="-size ${imsize} ${imsize}"
else
    imsize="-size 4096 4096"
fi

# set the image scale
if [[ ! -z ${pixscale} ]]
then
    pixscale="-scale ${pixscale}"
else
    pixscale="-scale 32asec"
fi


cd ${base}
python bin/track_task.py start --jobid=${SLURM_JOBID} --start_time=`date +%s`

cd ${datadir}/${obsnum}
echo "##WSCLEAN"
wsclean -name ${obsnum}-0.5s ${imsize} \
    -abs-mem ${mem} \
    -weight briggs -1 -mfsweighting ${imscale} \
    -pol xx,yy -minuv-l 30 \
    -niter 0  \
    -intervalsout 224 \
    ${obsnum}.ms
test_fail $?

# delete the dirty images as they are the same as the regular image
rm ${obsnum}-0.5s-??-dirty.fits

# make primary beam models
beams=$( ls beam-MFS-*.fits | wc -l )
if [[ ${beams} -ne 8 ]]
then
    echo "## Making primary beam"
    beam -2016 -proto ${obsnum}-0.5s-XX-image.fits -ms ${obsnum}.ms -name beam-MFS
    test_fail $?
else
    echo "## primary beam exists"
fi

# create stokes iquv images
echo "## making beam corrected images"
files=`ls ${obsnum}-0.5s-t0???-XX-image.fits`
for f in ${files}
do
  prefix=${f%%-XX-image.fits}
  pbcorrect ${prefix} image.fits beam-MFS ${prefix}-pbcorr
  test_fail $?
done

# delete the QUV images as they don't mean anything (since we only used xx/yy as input)
rm ${obsnum}-0.5s-*-pbcorr-[QUV].fits

cd ${base}
python bin/track_task.py finish --jobid=${SLURM_JOBID} --finish_time=`date +%s`

} 2> >(awk '{print strftime("%F %T")";",$0; fflush()}') \
  1> >(awk '{print strftime("%F %T")";",$0; fflush()}')

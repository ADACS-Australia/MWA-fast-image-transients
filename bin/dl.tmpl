#! /bin/bash -l
#SBATCH --export=NONE
#SBATCH -M zeus
#SBATCH -p copyq
#SBATCH --account=mwasci
#SBATCH --time=02:00:00
#SBATCH --nodes=1

function test_fail {
if [[ $1 != 0 ]]
then
    cd ${base}
    python bin/track_task.py fail --jobid=${SLURM_JOBID} --finish_time=`date +%s`
    exit $1
fi
}

base=BASEDIR
minbad=MINBAD
datadir=${base}/processing

obsnum=OBSNUM

# start download
cd ${base}
python bin/track_task.py start --jobid=${SLURM_JOBID} --start_time=`date +%s`

# use the non-egg version of the obsdownload
cd ${datadir}
obsdownload.py -o ${obsnum}
test_fail $?

cd ${obsnum} 

wget http://mwa-metadata01.pawsey.org.au/metadata/fits?obs_id=${obsnum}\&min_bad_dipoles=${minbad} -O ${obsnum}_metafits.fits
test_fail $?

# check how many files we expect to see
nexpected=$( sqlite3 ${base}/db/MWA-GRB.sqlite "SELECT nfiles FROM observation WHERE obs_id=${obsnum};" )
# obsid's that aren't in the database will return an empty number of expected files
# if we expect more than zero files make sure we have the right number
if [[ ${nexpected} -gt 0 ]]
then
    # see how many files there are
    nfiles=$( ls ${obsnum}*.{fits,mwaf} | wc -l )
    # if we don't have this many files then we have a bad result.
    if [[ ${nfiles} -ne ${nexpected} ]]
    then
	echo "Expected ${nexpected} files but found ${nfiles}, assuming something bad happened."
	test_fail 1
    fi
else
    echo "Don't know how many files to expect, so assuming everything is ok."
fi

cd ${base}
python bin/track_task.py finish --jobid=${SLURM_JOBID} --finish_time=`date +%s`

